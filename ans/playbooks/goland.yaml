---
- name: Install latest GoLand IDE for Linux
  hosts: all
  gather_facts: false

  tasks:
    - name: Get latest GoLand release info
      uri:
        url: "https://data.services.jetbrains.com/products/releases?code=GO&latest=true&type=release"
        return_content: yes
      register: goland_release
      changed_when: false
      delegate_to: localhost
      run_once: true

    - name: Extract Linux download URL
      set_fact:
        goland_linux_url: "{{ (goland_release.content | from_json).GO[0].downloads.linux.link }}"
      delegate_to: localhost
      run_once: true

    - name: Extract version from URL
      set_fact:
        goland_version: "{{ goland_linux_url | regex_search('goland-(.*?).tar.gz') | first | replace('goland-', '') }}"
      delegate_to: localhost

    - name: Debug extracted version
      debug:
        msg: "Detected GoLand version: {{ goland_version }}\nURL: {{ goland_linux_url }}"

    - name: Download GoLand
      get_url:
        url: "{{ goland_linux_url }}"
        dest: "/tmp/goland-{{ goland_version }}.tar.gz"
        mode: '0755'
        timeout: 60

    #- name: Clean previous installation
    #  file:
    #    path: "/opt/GoLand-{{ goland_version }}"
    #    state: absent
    #  become: true

    #- name: Install GoLand
    #  become: true
    #  unarchive:
    #    src: "/tmp/goland-{{ goland_version }}.tar.gz"
    #    dest: "/opt/"
    #    remote_src: yes
    #    extra_opts: ["--strip-components=1"]
    #    mode: '0755'

    #- name: Cleanup download
    #  file:
    #    path: "/tmp/goland-{{ goland_version }}.tar.gz"
    #    state: absent

    #- name: Verify installation
    #  stat:
    #    path: "/opt/GoLand-{{ goland_version }}/bin/goland.sh"
    #  register: install_check
    #  become: true
